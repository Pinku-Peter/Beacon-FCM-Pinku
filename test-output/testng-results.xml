<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="25" passed="25" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-01-24T15:52:08 IST" name="Default suite" finished-at="2025-01-24T16:02:48 IST" duration-ms="639367">
    <groups>
    </groups>
    <test started-at="2025-01-24T15:52:08 IST" name="Default test" finished-at="2025-01-24T16:02:48 IST" duration-ms="639367">
      <class name="com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:51:11 IST" name="SetUp" finished-at="2025-01-24T15:52:08 IST" duration-ms="57563" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:08 IST" name="setupTest" finished-at="2025-01-24T15:52:09 IST" duration-ms="166" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Login_to_call_centre_application_and_take_account_filtration_page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_call_centre_application_and_take_account_filtration_page()[pri:1, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:09 IST" name="Login_to_call_centre_application_and_take_account_filtration_page" finished-at="2025-01-24T15:52:17 IST" duration-ms="8338" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_call_centre_application_and_take_account_filtration_page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:17 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:52:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_call_centre_application_and_take_account_filtration_page status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Login_to_call_centre_application_and_take_account_filtration_page()[pri:1, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:17 IST" name="setupTest" finished-at="2025-01-24T15:52:17 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Allocated_To_dropdown_mandatory_checking() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocated_To_dropdown_mandatory_checking()[pri:2, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:17 IST" name="Allocated_To_dropdown_mandatory_checking" finished-at="2025-01-24T15:52:26 IST" duration-ms="8805" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocated_To_dropdown_mandatory_checking -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:26 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:52:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocated_To_dropdown_mandatory_checking status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Allocated_To_dropdown_mandatory_checking()[pri:2, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:27 IST" name="setupTest" finished-at="2025-01-24T15:52:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Asset_category_dropdown_mandatory_checking(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_category_dropdown_mandatory_checking(java.util.Map)[pri:3, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:27 IST" name="Asset_category_dropdown_mandatory_checking" data-provider="TestData" finished-at="2025-01-24T15:52:35 IST" duration-ms="8765" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationType=Manual Allocation, OutstandingBalance=12345, OutstandingBalanceOperator==, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_category_dropdown_mandatory_checking -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:35 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:52:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_category_dropdown_mandatory_checking status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Asset_category_dropdown_mandatory_checking(java.util.Map)[pri:3, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:35 IST" name="setupTest" finished-at="2025-01-24T15:52:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Select_SMA_and_NPA_Categories() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_SMA_and_NPA_Categories()[pri:4, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:35 IST" name="Select_SMA_and_NPA_Categories" finished-at="2025-01-24T15:52:59 IST" duration-ms="23445" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_SMA_and_NPA_Categories -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:59 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:52:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_SMA_and_NPA_Categories status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Select_SMA_and_NPA_Categories()[pri:4, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:59 IST" name="setupTest" finished-at="2025-01-24T15:52:59 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.SMA_Category_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMA_Category_Selection()[pri:5, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:52:59 IST" name="SMA_Category_Selection" finished-at="2025-01-24T15:53:02 IST" duration-ms="3570" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:53:02 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:53:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.SMA_Category_Selection()[pri:5, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:53:02 IST" name="setupTest" finished-at="2025-01-24T15:53:02 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.NPA_Category_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="NPA_Category_Selection()[pri:6, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:53:02 IST" name="NPA_Category_Selection" finished-at="2025-01-24T15:53:06 IST" duration-ms="3567" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:53:06 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:53:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.NPA_Category_Selection()[pri:6, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:53:06 IST" name="setupTest" finished-at="2025-01-24T15:53:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Allocation_Type_Selection_Manual_allocation(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocation_Type_Selection_Manual_allocation(java.util.Map)[pri:7, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:53:06 IST" name="Allocation_Type_Selection_Manual_allocation" data-provider="TestData" finished-at="2025-01-24T15:53:10 IST" duration-ms="4114" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationType=Manual Allocation, OutstandingBalance=12345, OutstandingBalanceOperator==, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocation_Type_Selection_Manual_allocation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:53:10 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:53:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocation_Type_Selection_Manual_allocation status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Allocation_Type_Selection_Manual_allocation(java.util.Map)[pri:7, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:53:10 IST" name="setupTest" finished-at="2025-01-24T15:53:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Perform_Search_with_Valid_Data() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Perform_Search_with_Valid_Data()[pri:8, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:53:10 IST" name="Perform_Search_with_Valid_Data" finished-at="2025-01-24T15:53:20 IST" duration-ms="10246" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Perform_Search_with_Valid_Data -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:53:20 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:53:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Perform_Search_with_Valid_Data status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Perform_Search_with_Valid_Data()[pri:8, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:53:20 IST" name="setupTest" finished-at="2025-01-24T15:53:20 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Login_and_Navigation_to_Manual_Allocation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_and_Navigation_to_Manual_Allocation()[pri:9, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:53:20 IST" name="Login_and_Navigation_to_Manual_Allocation" finished-at="2025-01-24T15:55:11 IST" duration-ms="110924" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_and_Navigation_to_Manual_Allocation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:11 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:55:11 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_and_Navigation_to_Manual_Allocation status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Login_and_Navigation_to_Manual_Allocation()[pri:9, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:11 IST" name="setupTest" finished-at="2025-01-24T15:55:11 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Verify_Fields_and_Buttons_on_Manual_Allocation_Page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Fields_and_Buttons_on_Manual_Allocation_Page()[pri:10, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:11 IST" name="Verify_Fields_and_Buttons_on_Manual_Allocation_Page" finished-at="2025-01-24T15:55:16 IST" duration-ms="4820" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Fields_and_Buttons_on_Manual_Allocation_Page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:16 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:55:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Fields_and_Buttons_on_Manual_Allocation_Page status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Verify_Fields_and_Buttons_on_Manual_Allocation_Page()[pri:10, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:16 IST" name="setupTest" finished-at="2025-01-24T15:55:16 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Mandatory_Field_Validation_for_Asset_Category() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Mandatory_Field_Validation_for_Asset_Category()[pri:11, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:16 IST" name="Mandatory_Field_Validation_for_Asset_Category" finished-at="2025-01-24T15:55:25 IST" duration-ms="8608" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Mandatory_Field_Validation_for_Asset_Category -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:25 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:55:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Mandatory_Field_Validation_for_Asset_Category status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Mandatory_Field_Validation_for_Asset_Category()[pri:11, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:25 IST" name="setupTest" finished-at="2025-01-24T15:55:25 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Asset_Category_SMA_and_NPA_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_Category_SMA_and_NPA_Selection()[pri:12, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:25 IST" name="Asset_Category_SMA_and_NPA_Selection" finished-at="2025-01-24T15:55:39 IST" duration-ms="13836" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_Category_SMA_and_NPA_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:39 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:55:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_Category_SMA_and_NPA_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Asset_Category_SMA_and_NPA_Selection()[pri:12, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:39 IST" name="setupTest" finished-at="2025-01-24T15:55:39 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.SMA_Category_Dropdown_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMA_Category_Dropdown_Selection()[pri:13, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:39 IST" name="SMA_Category_Dropdown_Selection" finished-at="2025-01-24T15:55:43 IST" duration-ms="4290" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:43 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:55:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.SMA_Category_Dropdown_Selection()[pri:13, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:43 IST" name="setupTest" finished-at="2025-01-24T15:55:43 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.NPA_Category_Dropdown_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="NPA_Category_Dropdown_Selection()[pri:14, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:43 IST" name="NPA_Category_Dropdown_Selection" finished-at="2025-01-24T15:55:46 IST" duration-ms="3330" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:46 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:55:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.NPA_Category_Dropdown_Selection()[pri:14, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:46 IST" name="setupTest" finished-at="2025-01-24T15:55:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.OS_Balance_Field_Validation(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="OS_Balance_Field_Validation(java.util.Map)[pri:15, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:46 IST" name="OS_Balance_Field_Validation" data-provider="TestData" finished-at="2025-01-24T15:55:50 IST" duration-ms="3671" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationType=Manual Allocation, OutstandingBalance=12345, OutstandingBalanceOperator==, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OS_Balance_Field_Validation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:50 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:55:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=OS_Balance_Field_Validation status=SUCCESS method=AllScenarios_CoreManualAllocationModule.OS_Balance_Field_Validation(java.util.Map)[pri:15, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:50 IST" name="setupTest" finished-at="2025-01-24T15:55:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.To_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="To_Field_Dropdown_Selection(java.util.Map)[pri:16, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:50 IST" name="To_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-01-24T15:55:54 IST" duration-ms="3451" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocatedTo=Call Centre, AllocationType=Manual Allocation, OutstandingBalance=12345, OutstandingBalanceOperator==, Run=Yes, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- To_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:54 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:55:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=To_Field_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.To_Field_Dropdown_Selection(java.util.Map)[pri:16, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:54 IST" name="setupTest" finished-at="2025-01-24T15:55:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Search_with_Mandatory_Fields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_with_Mandatory_Fields()[pri:17, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:55:54 IST" name="Search_with_Mandatory_Fields" finished-at="2025-01-24T15:56:09 IST" duration-ms="15438" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_with_Mandatory_Fields -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:56:09 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:56:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_with_Mandatory_Fields status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Search_with_Mandatory_Fields()[pri:17, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:56:09 IST" name="setupTest" finished-at="2025-01-24T15:56:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Download_Excel_Functionality() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_Excel_Functionality()[pri:18, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:56:09 IST" name="Download_Excel_Functionality" finished-at="2025-01-24T15:56:22 IST" duration-ms="12987" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_Excel_Functionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:56:22 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:56:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_Excel_Functionality status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Download_Excel_Functionality()[pri:18, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:56:22 IST" name="setupTest" finished-at="2025-01-24T15:56:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Excel_Account_Count_Verification() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Excel_Account_Count_Verification()[pri:19, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:56:22 IST" name="Excel_Account_Count_Verification" finished-at="2025-01-24T15:56:25 IST" duration-ms="3257" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Excel_Account_Count_Verification -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:56:25 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:56:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Excel_Account_Count_Verification status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Excel_Account_Count_Verification()[pri:19, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:56:25 IST" name="setupTest" finished-at="2025-01-24T15:56:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Login_to_call_centre_application_and_take_updation_of_disposition_page() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_call_centre_application_and_take_updation_of_disposition_page()[pri:20, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:56:25 IST" name="Login_to_call_centre_application_and_take_updation_of_disposition_page" finished-at="2025-01-24T15:57:51 IST" duration-ms="85413" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_call_centre_application_and_take_updation_of_disposition_page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:57:51 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T15:57:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_call_centre_application_and_take_updation_of_disposition_page status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Login_to_call_centre_application_and_take_updation_of_disposition_page()[pri:20, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:57:51 IST" name="setupTest" finished-at="2025-01-24T15:57:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Login_and_Navigation_to_Manual_Allocation_Core_Application() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_and_Navigation_to_Manual_Allocation_Core_Application()[pri:21, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T15:57:51 IST" name="Login_and_Navigation_to_Manual_Allocation_Core_Application" finished-at="2025-01-24T16:02:16 IST" duration-ms="265331" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_and_Navigation_to_Manual_Allocation_Core_Application -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:16 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T16:02:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_and_Navigation_to_Manual_Allocation_Core_Application status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Login_and_Navigation_to_Manual_Allocation_Core_Application()[pri:21, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:16 IST" name="setupTest" finished-at="2025-01-24T16:02:16 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Mandatory_Field_Validation_for_Asset_Category_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Mandatory_Field_Validation_for_Asset_Category_()[pri:22, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:16 IST" name="Mandatory_Field_Validation_for_Asset_Category_" finished-at="2025-01-24T16:02:26 IST" duration-ms="9592" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Mandatory_Field_Validation_for_Asset_Category_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:26 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T16:02:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Mandatory_Field_Validation_for_Asset_Category_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Mandatory_Field_Validation_for_Asset_Category_()[pri:22, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:26 IST" name="setupTest" finished-at="2025-01-24T16:02:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Asset_Category_SMA_and_NPA_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_Category_SMA_and_NPA_Selection_()[pri:23, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:26 IST" name="Asset_Category_SMA_and_NPA_Selection_" finished-at="2025-01-24T16:02:40 IST" duration-ms="14303" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_Category_SMA_and_NPA_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:40 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T16:02:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_Category_SMA_and_NPA_Selection_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Asset_Category_SMA_and_NPA_Selection_()[pri:23, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="SMA_Category_Dropdown_Selection_()[pri:24, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:40 IST" name="SMA_Category_Dropdown_Selection_" finished-at="2025-01-24T16:02:44 IST" duration-ms="4229" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Dropdown_Selection_ -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:40 IST" name="setupTest" finished-at="2025-01-24T16:02:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.SMA_Category_Dropdown_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:44 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T16:02:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Dropdown_Selection_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.SMA_Category_Dropdown_Selection_()[pri:24, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:44 IST" name="setupTest" finished-at="2025-01-24T16:02:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.NPA_Category_Dropdown_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="NPA_Category_Dropdown_Selection_()[pri:25, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:44 IST" name="NPA_Category_Dropdown_Selection_" finished-at="2025-01-24T16:02:48 IST" duration-ms="3608" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Dropdown_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:48 IST" name="takeScreenshotOnFailure" finished-at="2025-01-24T16:02:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Dropdown_Selection_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.NPA_Category_Dropdown_Selection_()[pri:25, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@1ff4931d]" started-at="2025-01-24T16:02:48 IST" name="afterEachTest" finished-at="2025-01-24T16:02:48 IST" duration-ms="361" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
