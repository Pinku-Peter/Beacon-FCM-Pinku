<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="5" passed="5" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-04-09T15:07:13 IST" name="Default suite" finished-at="2025-04-09T15:14:05 IST" duration-ms="412498">
    <groups>
    </groups>
    <test started-at="2025-04-09T15:07:13 IST" name="Default test" finished-at="2025-04-09T15:14:05 IST" duration-ms="412498">
      <class name="core.SummaryReports.BankAllocationSummary_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:07:13 IST" name="SetUp" finished-at="2025-04-09T15:07:13 IST" duration-ms="24" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:07:14 IST" name="setupTest" finished-at="2025-04-09T15:07:15 IST" duration-ms="119" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.SummaryReports.BankAllocationSummary_TestClass.testSuccessfulAccountAllocation(java.util.Map) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="testSuccessfulAccountAllocation(java.util.Map)[pri:1, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:07:15 IST" name="testSuccessfulAccountAllocation" data-provider="TestData" finished-at="2025-04-09T15:09:57 IST" duration-ms="162843" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Branch, AssetCategory=SMA Category, Branch=Amaravati, FromandToDates=9, OsBalanceAmount=10000, OsBalanceOperator=<, Region=Mumbai I, Run=Yes, SMACategory=SMA 0 (01-30 Days), TestScenario=CoreBankAllocationSummary}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSuccessfulAccountAllocation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:09:57 IST" name="takeScreenshotOnFailure" finished-at="2025-04-09T15:09:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSuccessfulAccountAllocation status=SUCCESS method=BankAllocationSummary_TestClass.testSuccessfulAccountAllocation(java.util.Map)[pri:1, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:09:57 IST" name="setupTest" finished-at="2025-04-09T15:09:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.SummaryReports.BankAllocationSummary_TestClass.testValidUserLogin() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="testValidUserLogin()[pri:2, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:09:57 IST" name="testValidUserLogin" finished-at="2025-04-09T15:11:21 IST" duration-ms="83213" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidUserLogin -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:11:21 IST" name="takeScreenshotOnFailure" finished-at="2025-04-09T15:11:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidUserLogin status=SUCCESS method=BankAllocationSummary_TestClass.testValidUserLogin()[pri:2, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:11:21 IST" name="setupTest" finished-at="2025-04-09T15:11:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.SummaryReports.BankAllocationSummary_TestClass.testAccountAllocation() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="testAccountAllocation()[pri:3, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:11:21 IST" name="testAccountAllocation" finished-at="2025-04-09T15:12:14 IST" duration-ms="53533" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAccountAllocation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:12:14 IST" name="takeScreenshotOnFailure" finished-at="2025-04-09T15:12:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testAccountAllocation status=SUCCESS method=BankAllocationSummary_TestClass.testAccountAllocation()[pri:3, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:12:14 IST" name="setupTest" finished-at="2025-04-09T15:12:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.SummaryReports.BankAllocationSummary_TestClass.validateDataExecutionForBankAllocationSummary() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="validateDataExecutionForBankAllocationSummary()[pri:4, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:12:14 IST" name="validateDataExecutionForBankAllocationSummary" finished-at="2025-04-09T15:12:15 IST" duration-ms="605" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateDataExecutionForBankAllocationSummary -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:12:15 IST" name="takeScreenshotOnFailure" finished-at="2025-04-09T15:12:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=validateDataExecutionForBankAllocationSummary status=SUCCESS method=BankAllocationSummary_TestClass.validateDataExecutionForBankAllocationSummary()[pri:4, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:12:15 IST" name="setupTest" finished-at="2025-04-09T15:12:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.SummaryReports.BankAllocationSummary_TestClass.testVerifyTodaysAccountsInBranchAllocation(java.util.Map) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="testVerifyTodaysAccountsInBranchAllocation(java.util.Map)[pri:5, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:12:15 IST" name="testVerifyTodaysAccountsInBranchAllocation" data-provider="TestData" finished-at="2025-04-09T15:14:05 IST" duration-ms="109885" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Branch, AssetCategory=SMA Category, Branch=Amaravati, FromandToDates=9, OsBalanceAmount=10000, OsBalanceOperator=<, Region=Mumbai I, Run=Yes, SMACategory=SMA 0 (01-30 Days), TestScenario=CoreBankAllocationSummary}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyTodaysAccountsInBranchAllocation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:14:05 IST" name="takeScreenshotOnFailure" finished-at="2025-04-09T15:14:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testVerifyTodaysAccountsInBranchAllocation status=SUCCESS method=BankAllocationSummary_TestClass.testVerifyTodaysAccountsInBranchAllocation(java.util.Map)[pri:5, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:core.SummaryReports.BankAllocationSummary_TestClass@4e08711f]" started-at="2025-04-09T15:14:05 IST" name="afterEachTest" finished-at="2025-04-09T15:14:05 IST" duration-ms="490" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- core.SummaryReports.BankAllocationSummary_TestClass -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
