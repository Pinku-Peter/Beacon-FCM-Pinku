<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="54" passed="54" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-01-31T20:28:54 IST" name="Default suite" finished-at="2025-01-31T20:40:32 IST" duration-ms="697739">
    <groups>
    </groups>
    <test started-at="2025-01-31T20:28:54 IST" name="Default test" finished-at="2025-01-31T20:40:32 IST" duration-ms="697739">
      <class name="com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:28:01 IST" name="SetUp" finished-at="2025-01-31T20:28:54 IST" duration-ms="53382" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:28:54 IST" name="setupTest" finished-at="2025-01-31T20:28:55 IST" duration-ms="149" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Login_to_call_centre_application_and_take_account_filtration_page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_call_centre_application_and_take_account_filtration_page()[pri:1, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:28:55 IST" name="Login_to_call_centre_application_and_take_account_filtration_page" finished-at="2025-01-31T20:29:05 IST" duration-ms="10006" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_call_centre_application_and_take_account_filtration_page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:05 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:29:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_call_centre_application_and_take_account_filtration_page status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Login_to_call_centre_application_and_take_account_filtration_page()[pri:1, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:05 IST" name="setupTest" finished-at="2025-01-31T20:29:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Allocated_To_dropdown_mandatory_checking() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocated_To_dropdown_mandatory_checking()[pri:2, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:05 IST" name="Allocated_To_dropdown_mandatory_checking" finished-at="2025-01-31T20:29:13 IST" duration-ms="8760" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocated_To_dropdown_mandatory_checking -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:13 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:29:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocated_To_dropdown_mandatory_checking status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Allocated_To_dropdown_mandatory_checking()[pri:2, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:14 IST" name="setupTest" finished-at="2025-01-31T20:29:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Asset_category_dropdown_mandatory_checking(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_category_dropdown_mandatory_checking(java.util.Map)[pri:3, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:14 IST" name="Asset_category_dropdown_mandatory_checking" data-provider="TestData" finished-at="2025-01-31T20:29:23 IST" duration-ms="9023" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_category_dropdown_mandatory_checking -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:23 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:29:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_category_dropdown_mandatory_checking status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Asset_category_dropdown_mandatory_checking(java.util.Map)[pri:3, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:23 IST" name="setupTest" finished-at="2025-01-31T20:29:23 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Select_SMA_and_NPA_Categories() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_SMA_and_NPA_Categories()[pri:4, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:23 IST" name="Select_SMA_and_NPA_Categories" finished-at="2025-01-31T20:29:36 IST" duration-ms="13267" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_SMA_and_NPA_Categories -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:36 IST" name="setupTest" finished-at="2025-01-31T20:29:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.SMA_Category_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:36 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:29:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_SMA_and_NPA_Categories status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Select_SMA_and_NPA_Categories()[pri:4, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="SMA_Category_Selection()[pri:5, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:36 IST" name="SMA_Category_Selection" finished-at="2025-01-31T20:29:40 IST" duration-ms="3725" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:40 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:29:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.SMA_Category_Selection()[pri:5, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:40 IST" name="setupTest" finished-at="2025-01-31T20:29:40 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.NPA_Category_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="NPA_Category_Selection_()[pri:6, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:40 IST" name="NPA_Category_Selection_" finished-at="2025-01-31T20:29:44 IST" duration-ms="3630" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:44 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:29:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Selection_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.NPA_Category_Selection_()[pri:6, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:44 IST" name="setupTest" finished-at="2025-01-31T20:29:44 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Allocation_Type_Selection_Manual_allocation(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocation_Type_Selection_Manual_allocation(java.util.Map)[pri:7, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:44 IST" name="Allocation_Type_Selection_Manual_allocation" data-provider="TestData" finished-at="2025-01-31T20:29:48 IST" duration-ms="4267" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocation_Type_Selection_Manual_allocation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:48 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:29:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocation_Type_Selection_Manual_allocation status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Allocation_Type_Selection_Manual_allocation(java.util.Map)[pri:7, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:48 IST" name="setupTest" finished-at="2025-01-31T20:29:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Perform_Search_with_Valid_Data() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Perform_Search_with_Valid_Data()[pri:8, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:48 IST" name="Perform_Search_with_Valid_Data" finished-at="2025-01-31T20:29:59 IST" duration-ms="11145" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Perform_Search_with_Valid_Data -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:59 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:29:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Perform_Search_with_Valid_Data status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Perform_Search_with_Valid_Data()[pri:8, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:59 IST" name="setupTest" finished-at="2025-01-31T20:29:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Login_and_Navigation_to_Manual_Allocation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_and_Navigation_to_Manual_Allocation()[pri:9, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:29:59 IST" name="Login_and_Navigation_to_Manual_Allocation" finished-at="2025-01-31T20:31:29 IST" duration-ms="89624" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_and_Navigation_to_Manual_Allocation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:31:29 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:31:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_and_Navigation_to_Manual_Allocation status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Login_and_Navigation_to_Manual_Allocation()[pri:9, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:31:29 IST" name="setupTest" finished-at="2025-01-31T20:31:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Verify_Fields_and_Buttons_on_Manual_Allocation_Page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Fields_and_Buttons_on_Manual_Allocation_Page()[pri:10, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:31:29 IST" name="Verify_Fields_and_Buttons_on_Manual_Allocation_Page" finished-at="2025-01-31T20:31:34 IST" duration-ms="4805" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Fields_and_Buttons_on_Manual_Allocation_Page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:31:34 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:31:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Fields_and_Buttons_on_Manual_Allocation_Page status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Verify_Fields_and_Buttons_on_Manual_Allocation_Page()[pri:10, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:31:34 IST" name="setupTest" finished-at="2025-01-31T20:31:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Mandatory_Field_Validation_for_Asset_Category() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Mandatory_Field_Validation_for_Asset_Category()[pri:11, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:31:34 IST" name="Mandatory_Field_Validation_for_Asset_Category" finished-at="2025-01-31T20:31:42 IST" duration-ms="8152" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Mandatory_Field_Validation_for_Asset_Category -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:31:42 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:31:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Mandatory_Field_Validation_for_Asset_Category status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Mandatory_Field_Validation_for_Asset_Category()[pri:11, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:31:42 IST" name="setupTest" finished-at="2025-01-31T20:31:42 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Asset_Category_SMA_and_NPA_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_Category_SMA_and_NPA_Selection()[pri:12, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:31:42 IST" name="Asset_Category_SMA_and_NPA_Selection" finished-at="2025-01-31T20:31:56 IST" duration-ms="14307" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_Category_SMA_and_NPA_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:31:56 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:31:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_Category_SMA_and_NPA_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Asset_Category_SMA_and_NPA_Selection()[pri:12, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:31:56 IST" name="setupTest" finished-at="2025-01-31T20:31:56 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.SMA_Category_Dropdown_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMA_Category_Dropdown_Selection()[pri:13, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:31:56 IST" name="SMA_Category_Dropdown_Selection" finished-at="2025-01-31T20:32:00 IST" duration-ms="4273" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:00 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:32:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.SMA_Category_Dropdown_Selection()[pri:13, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:00 IST" name="setupTest" finished-at="2025-01-31T20:32:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.NPA_Category_Dropdown_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="NPA_Category_Dropdown_Selection()[pri:14, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:00 IST" name="NPA_Category_Dropdown_Selection" finished-at="2025-01-31T20:32:04 IST" duration-ms="3312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:04 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:32:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.NPA_Category_Dropdown_Selection()[pri:14, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:04 IST" name="setupTest" finished-at="2025-01-31T20:32:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.OS_Balance_Field_Validation(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="OS_Balance_Field_Validation(java.util.Map)[pri:15, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:04 IST" name="OS_Balance_Field_Validation" data-provider="TestData" finished-at="2025-01-31T20:32:08 IST" duration-ms="3650" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OS_Balance_Field_Validation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:08 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:32:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=OS_Balance_Field_Validation status=SUCCESS method=AllScenarios_CoreManualAllocationModule.OS_Balance_Field_Validation(java.util.Map)[pri:15, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:08 IST" name="setupTest" finished-at="2025-01-31T20:32:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.To_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="To_Field_Dropdown_Selection(java.util.Map)[pri:16, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:08 IST" name="To_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-01-31T20:32:11 IST" duration-ms="3401" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- To_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:11 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:32:11 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=To_Field_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.To_Field_Dropdown_Selection(java.util.Map)[pri:16, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:11 IST" name="setupTest" finished-at="2025-01-31T20:32:11 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Search_with_Mandatory_Fields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_with_Mandatory_Fields()[pri:17, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:11 IST" name="Search_with_Mandatory_Fields" finished-at="2025-01-31T20:32:25 IST" duration-ms="14255" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_with_Mandatory_Fields -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:25 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:32:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_with_Mandatory_Fields status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Search_with_Mandatory_Fields()[pri:17, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:25 IST" name="setupTest" finished-at="2025-01-31T20:32:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Download_Excel_Functionality() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_Excel_Functionality()[pri:18, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:25 IST" name="Download_Excel_Functionality" finished-at="2025-01-31T20:32:37 IST" duration-ms="11366" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_Excel_Functionality -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:37 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:32:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_Excel_Functionality status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Download_Excel_Functionality()[pri:18, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:37 IST" name="setupTest" finished-at="2025-01-31T20:32:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Excel_Account_Count_Verification() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Excel_Account_Count_Verification()[pri:19, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:37 IST" name="Excel_Account_Count_Verification" finished-at="2025-01-31T20:32:40 IST" duration-ms="3263" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Excel_Account_Count_Verification -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:40 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:32:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Excel_Account_Count_Verification status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Excel_Account_Count_Verification()[pri:19, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:40 IST" name="setupTest" finished-at="2025-01-31T20:32:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Login_to_call_centre_application_and_take_updation_of_disposition_page() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_call_centre_application_and_take_updation_of_disposition_page()[pri:20, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:32:40 IST" name="Login_to_call_centre_application_and_take_updation_of_disposition_page" finished-at="2025-01-31T20:33:50 IST" duration-ms="70074" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_call_centre_application_and_take_updation_of_disposition_page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:33:50 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:33:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_call_centre_application_and_take_updation_of_disposition_page status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Login_to_call_centre_application_and_take_updation_of_disposition_page()[pri:20, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:33:50 IST" name="setupTest" finished-at="2025-01-31T20:33:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Login_and_Navigation_to_Manual_Allocation_Core_Application() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_and_Navigation_to_Manual_Allocation_Core_Application()[pri:21, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:33:50 IST" name="Login_and_Navigation_to_Manual_Allocation_Core_Application" finished-at="2025-01-31T20:35:30 IST" duration-ms="99965" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_and_Navigation_to_Manual_Allocation_Core_Application -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:35:30 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:35:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_and_Navigation_to_Manual_Allocation_Core_Application status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Login_and_Navigation_to_Manual_Allocation_Core_Application()[pri:21, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:35:30 IST" name="setupTest" finished-at="2025-01-31T20:35:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Mandatory_Field_Validation_for_Asset_Category_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Mandatory_Field_Validation_for_Asset_Category_()[pri:22, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:35:30 IST" name="Mandatory_Field_Validation_for_Asset_Category_" finished-at="2025-01-31T20:35:40 IST" duration-ms="9655" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Mandatory_Field_Validation_for_Asset_Category_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:35:40 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:35:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Mandatory_Field_Validation_for_Asset_Category_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Mandatory_Field_Validation_for_Asset_Category_()[pri:22, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:35:40 IST" name="setupTest" finished-at="2025-01-31T20:35:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Asset_Category_SMA_and_NPA_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_Category_SMA_and_NPA_Selection_()[pri:23, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:35:40 IST" name="Asset_Category_SMA_and_NPA_Selection_" finished-at="2025-01-31T20:35:53 IST" duration-ms="13799" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_Category_SMA_and_NPA_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:35:53 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:35:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_Category_SMA_and_NPA_Selection_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Asset_Category_SMA_and_NPA_Selection_()[pri:23, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:35:53 IST" name="setupTest" finished-at="2025-01-31T20:35:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.SMA_Category_Dropdown_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMA_Category_Dropdown_Selection_()[pri:24, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:35:53 IST" name="SMA_Category_Dropdown_Selection_" finished-at="2025-01-31T20:35:58 IST" duration-ms="4249" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Dropdown_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:35:58 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:35:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Dropdown_Selection_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.SMA_Category_Dropdown_Selection_()[pri:24, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:35:58 IST" name="setupTest" finished-at="2025-01-31T20:35:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.NPA_Category_Dropdown_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="NPA_Category_Dropdown_Selection_()[pri:25, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:35:58 IST" name="NPA_Category_Dropdown_Selection_" finished-at="2025-01-31T20:36:07 IST" duration-ms="9010" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Dropdown_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:07 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:36:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Dropdown_Selection_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.NPA_Category_Dropdown_Selection_()[pri:25, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:07 IST" name="setupTest" finished-at="2025-01-31T20:36:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.OS_Balance_Field_Validation_(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="OS_Balance_Field_Validation_(java.util.Map)[pri:26, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:07 IST" name="OS_Balance_Field_Validation_" data-provider="TestData" finished-at="2025-01-31T20:36:10 IST" duration-ms="3621" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OS_Balance_Field_Validation_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:10 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:36:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=OS_Balance_Field_Validation_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.OS_Balance_Field_Validation_(java.util.Map)[pri:26, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:10 IST" name="setupTest" finished-at="2025-01-31T20:36:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.To_Field_Dropdown_Selection_(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="To_Field_Dropdown_Selection_(java.util.Map)[pri:27, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:10 IST" name="To_Field_Dropdown_Selection_" data-provider="TestData" finished-at="2025-01-31T20:36:14 IST" duration-ms="3461" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- To_Field_Dropdown_Selection_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:14 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:36:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=To_Field_Dropdown_Selection_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.To_Field_Dropdown_Selection_(java.util.Map)[pri:27, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:14 IST" name="setupTest" finished-at="2025-01-31T20:36:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Search_with_Mandatory_Fields_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_with_Mandatory_Fields_()[pri:28, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:14 IST" name="Search_with_Mandatory_Fields_" finished-at="2025-01-31T20:36:29 IST" duration-ms="14772" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_with_Mandatory_Fields_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:29 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:36:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_with_Mandatory_Fields_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Search_with_Mandatory_Fields_()[pri:28, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:29 IST" name="setupTest" finished-at="2025-01-31T20:36:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Allocate_to_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocate_to_Field_Dropdown_Selection(java.util.Map)[pri:29, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:29 IST" name="Allocate_to_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-01-31T20:36:32 IST" duration-ms="3342" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocate_to_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:32 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:36:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocate_to_Field_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Allocate_to_Field_Dropdown_Selection(java.util.Map)[pri:29, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:32 IST" name="setupTest" finished-at="2025-01-31T20:36:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Select_Call_Centre_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_Call_Centre_Field_Dropdown_Selection(java.util.Map)[pri:30, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:32 IST" name="Select_Call_Centre_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-01-31T20:36:36 IST" duration-ms="3424" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Call_Centre_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:36 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:36:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Call_Centre_Field_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Select_Call_Centre_Field_Dropdown_Selection(java.util.Map)[pri:30, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:36 IST" name="setupTest" finished-at="2025-01-31T20:36:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Assign_Button_Validation_Message() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Assign_Button_Validation_Message()[pri:31, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:36 IST" name="Assign_Button_Validation_Message" finished-at="2025-01-31T20:36:45 IST" duration-ms="9487" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Assign_Button_Validation_Message -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:45 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:36:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Assign_Button_Validation_Message status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Assign_Button_Validation_Message()[pri:31, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:45 IST" name="setupTest" finished-at="2025-01-31T20:36:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Successful_Login_and_Navigation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Successful_Login_and_Navigation()[pri:32, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:36:45 IST" name="Successful_Login_and_Navigation" finished-at="2025-01-31T20:37:49 IST" duration-ms="64407" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Successful_Login_and_Navigation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:37:49 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:37:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Successful_Login_and_Navigation status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Successful_Login_and_Navigation()[pri:32, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:37:49 IST" name="setupTest" finished-at="2025-01-31T20:37:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Verify_Mandatory_Fields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_Mandatory_Fields()[pri:33, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:37:49 IST" name="Verify_Mandatory_Fields" finished-at="2025-01-31T20:37:53 IST" duration-ms="3079" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Mandatory_Fields -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:37:53 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:37:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Mandatory_Fields status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Verify_Mandatory_Fields()[pri:33, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:37:53 IST" name="setupTest" finished-at="2025-01-31T20:37:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Form_Submission_Without_Mandatory_Fields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Form_Submission_Without_Mandatory_Fields()[pri:34, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:37:53 IST" name="Form_Submission_Without_Mandatory_Fields" finished-at="2025-01-31T20:38:02 IST" duration-ms="9195" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Form_Submission_Without_Mandatory_Fields -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:02 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:38:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Form_Submission_Without_Mandatory_Fields status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Form_Submission_Without_Mandatory_Fields()[pri:34, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:02 IST" name="setupTest" finished-at="2025-01-31T20:38:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Asset_Category_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_Category_Selection()[pri:35, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:02 IST" name="Asset_Category_Selection" finished-at="2025-01-31T20:38:14 IST" duration-ms="12616" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_Category_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:14 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:38:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_Category_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Asset_Category_Selection()[pri:35, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:14 IST" name="setupTest" finished-at="2025-01-31T20:38:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.SMA_Category_Selection_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMA_Category_Selection_()[pri:36, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:14 IST" name="SMA_Category_Selection_" finished-at="2025-01-31T20:38:18 IST" duration-ms="3588" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Selection_ -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:18 IST" name="setupTest" finished-at="2025-01-31T20:38:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.NPA_Category_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:18 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:38:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Selection_ status=SUCCESS method=AllScenarios_CoreManualAllocationModule.SMA_Category_Selection_()[pri:36, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="NPA_Category_Selection()[pri:37, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:18 IST" name="NPA_Category_Selection" finished-at="2025-01-31T20:38:21 IST" duration-ms="3533" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:21 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:38:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.NPA_Category_Selection()[pri:37, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:21 IST" name="setupTest" finished-at="2025-01-31T20:38:21 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Allocation_Type_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocation_Type_Selection(java.util.Map)[pri:38, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:21 IST" name="Allocation_Type_Selection" data-provider="TestData" finished-at="2025-01-31T20:38:26 IST" duration-ms="4118" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocation_Type_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:26 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:38:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocation_Type_Selection status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Allocation_Type_Selection(java.util.Map)[pri:38, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:26 IST" name="setupTest" finished-at="2025-01-31T20:38:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Allocated_To_Selection_Call_Centre(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocated_To_Selection_Call_Centre(java.util.Map)[pri:39, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:26 IST" name="Allocated_To_Selection_Call_Centre" data-provider="TestData" finished-at="2025-01-31T20:38:29 IST" duration-ms="3597" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocated_To_Selection_Call_Centre -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:29 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:38:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocated_To_Selection_Call_Centre status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Allocated_To_Selection_Call_Centre(java.util.Map)[pri:39, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:29 IST" name="setupTest" finished-at="2025-01-31T20:38:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Search_Functionality_with_Filters() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_Functionality_with_Filters()[pri:40, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:29 IST" name="Search_Functionality_with_Filters" finished-at="2025-01-31T20:38:39 IST" duration-ms="9743" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_Functionality_with_Filters -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:39 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:38:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_Functionality_with_Filters status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Search_Functionality_with_Filters()[pri:40, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:39 IST" name="setupTest" finished-at="2025-01-31T20:38:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Download_File__List_of_Accounts(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_File__List_of_Accounts(java.util.Map)[pri:41, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:39 IST" name="Download_File__List_of_Accounts" data-provider="TestData" finished-at="2025-01-31T20:38:47 IST" duration-ms="7478" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_File__List_of_Accounts -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:47 IST" name="setupTest" finished-at="2025-01-31T20:38:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Verify_Downloaded_File() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:47 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:38:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_File__List_of_Accounts status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Download_File__List_of_Accounts(java.util.Map)[pri:41, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Downloaded_File()[pri:42, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:47 IST" name="Verify_Downloaded_File" finished-at="2025-01-31T20:38:50 IST" duration-ms="3144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Downloaded_File -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:50 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:38:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Downloaded_File status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Verify_Downloaded_File()[pri:42, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:50 IST" name="setupTest" finished-at="2025-01-31T20:38:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Verify_the_URL_after_navigating_to_the_Updation_of_Disposition_page() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Verify_the_URL_after_navigating_to_the_Updation_of_Disposition_page()[pri:43, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:50 IST" name="Verify_the_URL_after_navigating_to_the_Updation_of_Disposition_page" finished-at="2025-01-31T20:38:57 IST" duration-ms="7020" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_the_URL_after_navigating_to_the_Updation_of_Disposition_page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:57 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:38:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_the_URL_after_navigating_to_the_Updation_of_Disposition_page status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Verify_the_URL_after_navigating_to_the_Updation_of_Disposition_page()[pri:43, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:57 IST" name="setupTest" finished-at="2025-01-31T20:38:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Validate_presence_of_fields_and_buttons_on_the_Updation_of_Disposition_page() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_presence_of_fields_and_buttons_on_the_Updation_of_Disposition_page()[pri:44, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:38:57 IST" name="Validate_presence_of_fields_and_buttons_on_the_Updation_of_Disposition_page" finished-at="2025-01-31T20:39:03 IST" duration-ms="6293" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_presence_of_fields_and_buttons_on_the_Updation_of_Disposition_page -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:03 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:39:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_presence_of_fields_and_buttons_on_the_Updation_of_Disposition_page status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Validate_presence_of_fields_and_buttons_on_the_Updation_of_Disposition_page()[pri:44, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:03 IST" name="setupTest" finished-at="2025-01-31T20:39:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Account_Number_Field_ECP_Validations(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Account_Number_Field_ECP_Validations(java.util.Map)[pri:45, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:03 IST" name="Account_Number_Field_ECP_Validations" data-provider="TestData" finished-at="2025-01-31T20:39:06 IST" duration-ms="3419" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Account_Number_Field_ECP_Validations -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:06 IST" name="setupTest" finished-at="2025-01-31T20:39:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Search_with_Invalid_Account_Number() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:06 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:39:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Account_Number_Field_ECP_Validations status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Account_Number_Field_ECP_Validations(java.util.Map)[pri:45, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Search_with_Invalid_Account_Number()[pri:46, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:06 IST" name="Search_with_Invalid_Account_Number" finished-at="2025-01-31T20:39:25 IST" duration-ms="18831" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_with_Invalid_Account_Number -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:25 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:39:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_with_Invalid_Account_Number status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Search_with_Invalid_Account_Number()[pri:46, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:25 IST" name="setupTest" finished-at="2025-01-31T20:39:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Search_with_Valid_Account_Number() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_with_Valid_Account_Number()[pri:47, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:25 IST" name="Search_with_Valid_Account_Number" finished-at="2025-01-31T20:39:41 IST" duration-ms="15266" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_with_Valid_Account_Number -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:41 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:39:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_with_Valid_Account_Number status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Search_with_Valid_Account_Number()[pri:47, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Verify_Fields_in_Add_Interaction_Details_Section()[pri:48, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:41 IST" name="Verify_Fields_in_Add_Interaction_Details_Section" finished-at="2025-01-31T20:39:44 IST" duration-ms="3308" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Fields_in_Add_Interaction_Details_Section -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:41 IST" name="setupTest" finished-at="2025-01-31T20:39:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Verify_Fields_in_Add_Interaction_Details_Section() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:44 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:39:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Fields_in_Add_Interaction_Details_Section status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Verify_Fields_in_Add_Interaction_Details_Section()[pri:48, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Select_Internal_User_from_Action_Owner_Dropdown(java.util.Map)[pri:49, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:44 IST" name="Select_Internal_User_from_Action_Owner_Dropdown" data-provider="TestData" finished-at="2025-01-31T20:39:47 IST" duration-ms="3365" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Internal_User_from_Action_Owner_Dropdown -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:44 IST" name="setupTest" finished-at="2025-01-31T20:39:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Select_Internal_User_from_Action_Owner_Dropdown(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:47 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:39:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Internal_User_from_Action_Owner_Dropdown status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Select_Internal_User_from_Action_Owner_Dropdown(java.util.Map)[pri:49, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Select_Disposition_Type(java.util.Map)[pri:50, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:47 IST" name="Select_Disposition_Type" data-provider="TestData" finished-at="2025-01-31T20:39:56 IST" duration-ms="8826" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Disposition_Type -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:47 IST" name="setupTest" finished-at="2025-01-31T20:39:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Select_Disposition_Type(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:56 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:39:56 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Disposition_Type status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Select_Disposition_Type(java.util.Map)[pri:50, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:56 IST" name="setupTest" finished-at="2025-01-31T20:39:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Select_Sub_Disposition(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_Sub_Disposition(java.util.Map)[pri:51, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:39:56 IST" name="Select_Sub_Disposition" data-provider="TestData" finished-at="2025-01-31T20:40:00 IST" duration-ms="3343" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Sub_Disposition -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:40:00 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:40:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Sub_Disposition status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Select_Sub_Disposition(java.util.Map)[pri:51, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:40:00 IST" name="setupTest" finished-at="2025-01-31T20:40:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Select_Date_in_Next_Action_Date_DatePicker(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_Date_in_Next_Action_Date_DatePicker(java.util.Map)[pri:52, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:40:00 IST" name="Select_Date_in_Next_Action_Date_DatePicker" data-provider="TestData" finished-at="2025-01-31T20:40:03 IST" duration-ms="3310" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Date_in_Next_Action_Date_DatePicker -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:40:03 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:40:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Date_in_Next_Action_Date_DatePicker status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Select_Date_in_Next_Action_Date_DatePicker(java.util.Map)[pri:52, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:40:03 IST" name="setupTest" finished-at="2025-01-31T20:40:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Enter_Remarks_and_Save_Interaction(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Enter_Remarks_and_Save_Interaction(java.util.Map)[pri:53, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:40:03 IST" name="Enter_Remarks_and_Save_Interaction" data-provider="TestData" finished-at="2025-01-31T20:40:16 IST" duration-ms="13402" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{ActionDate=31, ActionOwnerDropdownValue=Internal User, AllocatedTo=Call Centre, AllocateTo=Call Centre, AllocationType=Manual Allocation, Alphabets=ABC, Alphanumeric=A1B2C3, Disposition=Connected, DownloadFile=List of Accounts - Excel, Numeric=123, OutstandingBalance=20000, OutstandingBalanceOperator=<, Remarks=test, Run=Yes, SelectCallCentre=CallCentre 1, SubDisposition=Moratorium, TestScenario=Call_Centre_Auto_Allocation, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Enter_Remarks_and_Save_Interaction -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:40:16 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:40:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Enter_Remarks_and_Save_Interaction status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Enter_Remarks_and_Save_Interaction(java.util.Map)[pri:53, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:40:16 IST" name="setupTest" finished-at="2025-01-31T20:40:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule.Search_for_Previously_Saved_Account_Interaction_Details() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_for_Previously_Saved_Account_Interaction_Details()[pri:54, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:40:16 IST" name="Search_for_Previously_Saved_Account_Interaction_Details" finished-at="2025-01-31T20:40:32 IST" duration-ms="15745" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_for_Previously_Saved_Account_Interaction_Details -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:40:32 IST" name="takeScreenshotOnFailure" finished-at="2025-01-31T20:40:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_for_Previously_Saved_Account_Interaction_Details status=SUCCESS method=AllScenarios_CoreManualAllocationModule.Search_for_Previously_Saved_Account_Interaction_Details()[pri:54, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule@37ceb1df]" started-at="2025-01-31T20:40:32 IST" name="afterEachTest" finished-at="2025-01-31T20:40:36 IST" duration-ms="4077" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- com.test.CoreManualAllocation_Module.AllScenarios_CoreManualAllocationModule -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
