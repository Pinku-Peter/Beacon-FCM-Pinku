<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="27" passed="27" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-02-13T15:03:09 IST" name="Default suite" finished-at="2025-02-13T15:07:59 IST" duration-ms="290053">
    <groups>
    </groups>
    <test started-at="2025-02-13T15:03:09 IST" name="Default test" finished-at="2025-02-13T15:07:59 IST" duration-ms="290053">
      <class name="com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:01:43 IST" name="SetUp" finished-at="2025-02-13T15:03:09 IST" duration-ms="86065" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:09 IST" name="setupTest" finished-at="2025-02-13T15:03:09 IST" duration-ms="135" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Login_and_Navigation_to_Manual_Allocation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_and_Navigation_to_Manual_Allocation()[pri:1, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:09 IST" name="Login_and_Navigation_to_Manual_Allocation" finished-at="2025-02-13T15:03:32 IST" duration-ms="22589" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_and_Navigation_to_Manual_Allocation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:32 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:03:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_and_Navigation_to_Manual_Allocation status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Login_and_Navigation_to_Manual_Allocation()[pri:1, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:32 IST" name="setupTest" finished-at="2025-02-13T15:03:32 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Asset_Category_SMA_and_NPA_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Asset_Category_SMA_and_NPA_Selection()[pri:2, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:32 IST" name="Asset_Category_SMA_and_NPA_Selection" finished-at="2025-02-13T15:03:46 IST" duration-ms="13795" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Asset_Category_SMA_and_NPA_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:46 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:03:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Asset_Category_SMA_and_NPA_Selection status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Asset_Category_SMA_and_NPA_Selection()[pri:2, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:46 IST" name="setupTest" finished-at="2025-02-13T15:03:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.SMA_Category_Dropdown_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="SMA_Category_Dropdown_Selection()[pri:3, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:46 IST" name="SMA_Category_Dropdown_Selection" finished-at="2025-02-13T15:03:50 IST" duration-ms="4258" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SMA_Category_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:50 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:03:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SMA_Category_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.SMA_Category_Dropdown_Selection()[pri:3, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:50 IST" name="setupTest" finished-at="2025-02-13T15:03:50 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.NPA_Category_Dropdown_Selection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="NPA_Category_Dropdown_Selection()[pri:4, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:50 IST" name="NPA_Category_Dropdown_Selection" finished-at="2025-02-13T15:03:53 IST" duration-ms="3323" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NPA_Category_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:53 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:03:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NPA_Category_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.NPA_Category_Dropdown_Selection()[pri:4, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:54 IST" name="setupTest" finished-at="2025-02-13T15:03:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.OS_Balance_Field_Validation(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="OS_Balance_Field_Validation(java.util.Map)[pri:5, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:54 IST" name="OS_Balance_Field_Validation" data-provider="TestData" finished-at="2025-02-13T15:03:58 IST" duration-ms="3667" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Call Centre, OutstandingBalance=25000, OutstandingBalanceOperator==, Run=Yes, SelectCallCentre=CallCentre 1, TestScenario=Core_Regularization_Summary, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OS_Balance_Field_Validation -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:58 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:03:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=OS_Balance_Field_Validation status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.OS_Balance_Field_Validation(java.util.Map)[pri:5, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:58 IST" name="setupTest" finished-at="2025-02-13T15:03:58 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.To_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="To_Field_Dropdown_Selection(java.util.Map)[pri:6, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:03:58 IST" name="To_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-02-13T15:04:01 IST" duration-ms="3408" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Call Centre, OutstandingBalance=25000, OutstandingBalanceOperator==, Run=Yes, SelectCallCentre=CallCentre 1, TestScenario=Core_Regularization_Summary, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- To_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:01 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:04:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=To_Field_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.To_Field_Dropdown_Selection(java.util.Map)[pri:6, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:01 IST" name="setupTest" finished-at="2025-02-13T15:04:01 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Search_with_Mandatory_Fields() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_with_Mandatory_Fields()[pri:7, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:01 IST" name="Search_with_Mandatory_Fields" finished-at="2025-02-13T15:04:21 IST" duration-ms="19967" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_with_Mandatory_Fields -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:21 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:04:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_with_Mandatory_Fields status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Search_with_Mandatory_Fields()[pri:7, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:21 IST" name="setupTest" finished-at="2025-02-13T15:04:21 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Allocate_to_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Allocate_to_Field_Dropdown_Selection(java.util.Map)[pri:8, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:21 IST" name="Allocate_to_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-02-13T15:04:25 IST" duration-ms="3323" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Call Centre, OutstandingBalance=25000, OutstandingBalanceOperator==, Run=Yes, SelectCallCentre=CallCentre 1, TestScenario=Core_Regularization_Summary, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Allocate_to_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:25 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:04:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Allocate_to_Field_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Allocate_to_Field_Dropdown_Selection(java.util.Map)[pri:8, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:25 IST" name="setupTest" finished-at="2025-02-13T15:04:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Select_Call_Centre_Field_Dropdown_Selection(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Select_Call_Centre_Field_Dropdown_Selection(java.util.Map)[pri:9, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:25 IST" name="Select_Call_Centre_Field_Dropdown_Selection" data-provider="TestData" finished-at="2025-02-13T15:04:28 IST" duration-ms="3348" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Call Centre, OutstandingBalance=25000, OutstandingBalanceOperator==, Run=Yes, SelectCallCentre=CallCentre 1, TestScenario=Core_Regularization_Summary, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Select_Call_Centre_Field_Dropdown_Selection -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:28 IST" name="setupTest" finished-at="2025-02-13T15:04:28 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Assign_Button_Validation_Message() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:28 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:04:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Select_Call_Centre_Field_Dropdown_Selection status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Select_Call_Centre_Field_Dropdown_Selection(java.util.Map)[pri:9, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Assign_Button_Validation_Message()[pri:10, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:28 IST" name="Assign_Button_Validation_Message" finished-at="2025-02-13T15:04:51 IST" duration-ms="22944" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Assign_Button_Validation_Message -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:51 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:04:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Assign_Button_Validation_Message status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Assign_Button_Validation_Message()[pri:10, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:51 IST" name="setupTest" finished-at="2025-02-13T15:04:51 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Create_entry_in_table_database() throws java.sql.SQLException,java.lang.ClassNotFoundException,java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Create_entry_in_table_database()[pri:11, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:04:51 IST" name="Create_entry_in_table_database" finished-at="2025-02-13T15:05:22 IST" duration-ms="31127" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Create_entry_in_table_database -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:22 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:05:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Create_entry_in_table_database status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Create_entry_in_table_database()[pri:11, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:22 IST" name="setupTest" finished-at="2025-02-13T15:05:22 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Side_Menu_Call_Centre_Listing() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Side_Menu_Call_Centre_Listing()[pri:12, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:22 IST" name="Side_Menu_Call_Centre_Listing" finished-at="2025-02-13T15:05:32 IST" duration-ms="9800" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Side_Menu_Call_Centre_Listing -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:32 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:05:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Side_Menu_Call_Centre_Listing status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Side_Menu_Call_Centre_Listing()[pri:12, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:32 IST" name="setupTest" finished-at="2025-02-13T15:05:32 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Sub_Menu_Regularization_Summary_Listing() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Sub_Menu_Regularization_Summary_Listing()[pri:13, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:32 IST" name="Sub_Menu_Regularization_Summary_Listing" finished-at="2025-02-13T15:05:35 IST" duration-ms="3130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Sub_Menu_Regularization_Summary_Listing -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:35 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:05:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Sub_Menu_Regularization_Summary_Listing status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Sub_Menu_Regularization_Summary_Listing()[pri:13, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:35 IST" name="setupTest" finished-at="2025-02-13T15:05:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Click_Regularization_Summary_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Click_Regularization_Summary_()[pri:14, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:35 IST" name="Click_Regularization_Summary_" finished-at="2025-02-13T15:05:43 IST" duration-ms="7556" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Click_Regularization_Summary_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:43 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:05:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Click_Regularization_Summary_ status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Click_Regularization_Summary_()[pri:14, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:43 IST" name="setupTest" finished-at="2025-02-13T15:05:43 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Regularization_Summary_Page_Dropdown_and_Search() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Regularization_Summary_Page_Dropdown_and_Search()[pri:15, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:43 IST" name="Regularization_Summary_Page_Dropdown_and_Search" finished-at="2025-02-13T15:05:46 IST" duration-ms="3065" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Regularization_Summary_Page_Dropdown_and_Search -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:46 IST" name="setupTest" finished-at="2025-02-13T15:05:46 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Click_Search_Without_Selecting_Dropdown() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:46 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:05:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Regularization_Summary_Page_Dropdown_and_Search status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Regularization_Summary_Page_Dropdown_and_Search()[pri:15, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method signature="Click_Search_Without_Selecting_Dropdown()[pri:16, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:46 IST" name="Click_Search_Without_Selecting_Dropdown" finished-at="2025-02-13T15:05:54 IST" duration-ms="8511" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Click_Search_Without_Selecting_Dropdown -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:54 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:05:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Click_Search_Without_Selecting_Dropdown status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Click_Search_Without_Selecting_Dropdown()[pri:16, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:54 IST" name="setupTest" finished-at="2025-02-13T15:05:54 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Dropdown_Callcentre_Name(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Dropdown_Callcentre_Name(java.util.Map)[pri:17, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:54 IST" name="Dropdown_Callcentre_Name" data-provider="TestData" finished-at="2025-02-13T15:05:58 IST" duration-ms="3238" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{AllocateTo=Call Centre, OutstandingBalance=25000, OutstandingBalanceOperator==, Run=Yes, SelectCallCentre=CallCentre 1, TestScenario=Core_Regularization_Summary, To=Call Centre}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Dropdown_Callcentre_Name -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:58 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:05:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Dropdown_Callcentre_Name status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Dropdown_Callcentre_Name(java.util.Map)[pri:17, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:58 IST" name="setupTest" finished-at="2025-02-13T15:05:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Search_Regularization_Summary() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Search_Regularization_Summary()[pri:18, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:05:58 IST" name="Search_Regularization_Summary" finished-at="2025-02-13T15:06:05 IST" duration-ms="6801" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Search_Regularization_Summary -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:05 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:06:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Search_Regularization_Summary status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Search_Regularization_Summary()[pri:18, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:05 IST" name="setupTest" finished-at="2025-02-13T15:06:05 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Download_the_regularization_summary_report() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_the_regularization_summary_report()[pri:19, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:05 IST" name="Download_the_regularization_summary_report" finished-at="2025-02-13T15:06:10 IST" duration-ms="5839" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_the_regularization_summary_report -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:10 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:06:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_the_regularization_summary_report status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Download_the_regularization_summary_report()[pri:19, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:10 IST" name="setupTest" finished-at="2025-02-13T15:06:10 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Data_Verification_in_Downloaded_File_() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Data_Verification_in_Downloaded_File_()[pri:20, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:10 IST" name="Data_Verification_in_Downloaded_File_" finished-at="2025-02-13T15:06:16 IST" duration-ms="5389" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Data_Verification_in_Downloaded_File_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:16 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:06:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Data_Verification_in_Downloaded_File_ status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Data_Verification_in_Downloaded_File_()[pri:20, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:16 IST" name="setupTest" finished-at="2025-02-13T15:06:16 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Download_the_regularization_summary_report_() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_the_regularization_summary_report_()[pri:21, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:16 IST" name="Download_the_regularization_summary_report_" finished-at="2025-02-13T15:06:24 IST" duration-ms="8014" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_the_regularization_summary_report_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:24 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:06:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_the_regularization_summary_report_ status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Download_the_regularization_summary_report_()[pri:21, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:24 IST" name="setupTest" finished-at="2025-02-13T15:06:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Validate_Downloaded_File_() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Downloaded_File_()[pri:22, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:24 IST" name="Validate_Downloaded_File_" finished-at="2025-02-13T15:06:27 IST" duration-ms="3287" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Downloaded_File_ -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:27 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:06:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Downloaded_File_ status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Validate_Downloaded_File_()[pri:22, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:27 IST" name="setupTest" finished-at="2025-02-13T15:06:27 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Login_to_call_centre_application() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_to_call_centre_application()[pri:23, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:06:27 IST" name="Login_to_call_centre_application" finished-at="2025-02-13T15:07:34 IST" duration-ms="66695" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_to_call_centre_application -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:34 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:07:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_to_call_centre_application status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Login_to_call_centre_application()[pri:23, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:34 IST" name="setupTest" finished-at="2025-02-13T15:07:34 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Click_Regularization_Summary() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Click_Regularization_Summary()[pri:24, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:34 IST" name="Click_Regularization_Summary" finished-at="2025-02-13T15:07:44 IST" duration-ms="10565" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Click_Regularization_Summary -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:44 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:07:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Click_Regularization_Summary status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Click_Regularization_Summary()[pri:24, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:44 IST" name="setupTest" finished-at="2025-02-13T15:07:44 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Data_Verification_in_Downloaded_File() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Data_Verification_in_Downloaded_File()[pri:25, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:44 IST" name="Data_Verification_in_Downloaded_File" finished-at="2025-02-13T15:07:50 IST" duration-ms="5380" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Data_Verification_in_Downloaded_File -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:50 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:07:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Data_Verification_in_Downloaded_File status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Data_Verification_in_Downloaded_File()[pri:25, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:50 IST" name="setupTest" finished-at="2025-02-13T15:07:50 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Download_regularization_Summary() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Download_regularization_Summary()[pri:26, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:50 IST" name="Download_regularization_Summary" finished-at="2025-02-13T15:07:56 IST" duration-ms="6357" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Download_regularization_Summary -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:56 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:07:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Download_regularization_Summary status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Download_regularization_Summary()[pri:26, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:56 IST" name="setupTest" finished-at="2025-02-13T15:07:56 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule.Validate_Downloaded_File() throws java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Downloaded_File()[pri:27, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:56 IST" name="Validate_Downloaded_File" finished-at="2025-02-13T15:07:59 IST" duration-ms="3217" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Downloaded_File -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:59 IST" name="takeScreenshotOnFailure" finished-at="2025-02-13T15:07:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Downloaded_File status=SUCCESS method=AllScenarios_CoreRegularizationSummaryModule.Validate_Downloaded_File()[pri:27, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule@61322f9d]" started-at="2025-02-13T15:07:59 IST" name="afterEachTest" finished-at="2025-02-13T15:08:01 IST" duration-ms="1174" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- com.test.CoreRegularizationSummary_Module.AllScenarios_CoreRegularizationSummaryModule -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
