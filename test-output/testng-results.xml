<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="11" passed="11" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-04-03T10:17:09 IST" name="Default suite" finished-at="2025-04-03T10:39:16 IST" duration-ms="1326984">
    <groups>
    </groups>
    <test started-at="2025-04-03T10:17:09 IST" name="Default test" finished-at="2025-04-03T10:39:16 IST" duration-ms="1326984">
      <class name="core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:17:09 IST" name="SetUp" finished-at="2025-04-03T10:17:09 IST" duration-ms="48" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:17:09 IST" name="setupTest" finished-at="2025-04-03T10:17:10 IST" duration-ms="1041" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass.Login_and_Navigate_to_Mask_Account_Window() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Login_and_Navigate_to_Mask_Account_Window()[pri:1, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:17:10 IST" name="Login_and_Navigate_to_Mask_Account_Window" finished-at="2025-04-03T10:20:29 IST" duration-ms="198778" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login_and_Navigate_to_Mask_Account_Window -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:20:29 IST" name="takeScreenshotOnFailure" finished-at="2025-04-03T10:20:29 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Login_and_Navigate_to_Mask_Account_Window status=SUCCESS method=AlertsMaskAcAndMaskingAutho_TestClass.Login_and_Navigate_to_Mask_Account_Window()[pri:1, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:20:30 IST" name="setupTest" finished-at="2025-04-03T10:20:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass.Mask_Account_with_Valid_Details(java.util.Map) throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Mask_Account_with_Valid_Details(java.util.Map)[pri:2, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:20:30 IST" name="Mask_Account_with_Valid_Details" data-provider="TestData" finished-at="2025-04-03T10:21:22 IST" duration-ms="51925" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{InvalidAccountNumber=1234, NotificationType=EMAIL, Reason=Test, Run=Yes, Status=Mask, Status2=Unmask, Template=Email 2, TestScenario=CoreAlertsMaskAcAndMaskingAutho}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Mask_Account_with_Valid_Details -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:21:22 IST" name="takeScreenshotOnFailure" finished-at="2025-04-03T10:21:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Mask_Account_with_Valid_Details status=SUCCESS method=AlertsMaskAcAndMaskingAutho_TestClass.Mask_Account_with_Valid_Details(java.util.Map)[pri:2, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:21:22 IST" name="setupTest" finished-at="2025-04-03T10:21:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass.Approve_Masking_Request() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Approve_Masking_Request()[pri:3, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:21:22 IST" name="Approve_Masking_Request" finished-at="2025-04-03T10:24:12 IST" duration-ms="169625" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Approve_Masking_Request -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:24:12 IST" name="takeScreenshotOnFailure" finished-at="2025-04-03T10:24:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Approve_Masking_Request status=SUCCESS method=AlertsMaskAcAndMaskingAutho_TestClass.Approve_Masking_Request()[pri:3, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:24:12 IST" name="setupTest" finished-at="2025-04-03T10:24:12 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass.Validate_Masked_Account_in_Notification_Management(java.util.Map) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Validate_Masked_Account_in_Notification_Management(java.util.Map)[pri:4, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:24:12 IST" name="Validate_Masked_Account_in_Notification_Management" data-provider="TestData" finished-at="2025-04-03T10:31:16 IST" duration-ms="423559" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{InvalidAccountNumber=1234, NotificationType=EMAIL, Reason=Test, Run=Yes, Status=Mask, Status2=Unmask, Template=Email 2, TestScenario=CoreAlertsMaskAcAndMaskingAutho}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Validate_Masked_Account_in_Notification_Management -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:31:16 IST" name="takeScreenshotOnFailure" finished-at="2025-04-03T10:31:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Validate_Masked_Account_in_Notification_Management status=SUCCESS method=AlertsMaskAcAndMaskingAutho_TestClass.Validate_Masked_Account_in_Notification_Management(java.util.Map)[pri:4, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:31:16 IST" name="setupTest" finished-at="2025-04-03T10:31:16 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass.Unmask_Account(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Unmask_Account(java.util.Map)[pri:5, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:31:16 IST" name="Unmask_Account" data-provider="TestData" finished-at="2025-04-03T10:32:06 IST" duration-ms="50838" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{InvalidAccountNumber=1234, NotificationType=EMAIL, Reason=Test, Run=Yes, Status=Mask, Status2=Unmask, Template=Email 2, TestScenario=CoreAlertsMaskAcAndMaskingAutho}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Unmask_Account -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:32:06 IST" name="takeScreenshotOnFailure" finished-at="2025-04-03T10:32:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Unmask_Account status=SUCCESS method=AlertsMaskAcAndMaskingAutho_TestClass.Unmask_Account(java.util.Map)[pri:5, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:32:06 IST" name="setupTest" finished-at="2025-04-03T10:32:06 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass.Approve_Unmask_Request() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Approve_Unmask_Request()[pri:6, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:32:06 IST" name="Approve_Unmask_Request" finished-at="2025-04-03T10:36:14 IST" duration-ms="247749" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Approve_Unmask_Request -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:36:14 IST" name="takeScreenshotOnFailure" finished-at="2025-04-03T10:36:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Approve_Unmask_Request status=SUCCESS method=AlertsMaskAcAndMaskingAutho_TestClass.Approve_Unmask_Request()[pri:6, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:36:14 IST" name="setupTest" finished-at="2025-04-03T10:36:14 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass.Account_Number_Field_BVA_Validations() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Account_Number_Field_BVA_Validations()[pri:7, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:36:14 IST" name="Account_Number_Field_BVA_Validations" finished-at="2025-04-03T10:36:42 IST" duration-ms="27398" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Account_Number_Field_BVA_Validations -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:36:42 IST" name="takeScreenshotOnFailure" finished-at="2025-04-03T10:36:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Account_Number_Field_BVA_Validations status=SUCCESS method=AlertsMaskAcAndMaskingAutho_TestClass.Account_Number_Field_BVA_Validations()[pri:7, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:36:42 IST" name="setupTest" finished-at="2025-04-03T10:36:42 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass.Account_Number_Field_ECP_Validations() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Account_Number_Field_ECP_Validations()[pri:8, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:36:42 IST" name="Account_Number_Field_ECP_Validations" finished-at="2025-04-03T10:37:00 IST" duration-ms="18693" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Account_Number_Field_ECP_Validations -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:37:00 IST" name="takeScreenshotOnFailure" finished-at="2025-04-03T10:37:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Account_Number_Field_ECP_Validations status=SUCCESS method=AlertsMaskAcAndMaskingAutho_TestClass.Account_Number_Field_ECP_Validations()[pri:8, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:37:00 IST" name="setupTest" finished-at="2025-04-03T10:37:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass.Enter_Invalid_Account_Number(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Enter_Invalid_Account_Number(java.util.Map)[pri:9, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:37:00 IST" name="Enter_Invalid_Account_Number" data-provider="TestData" finished-at="2025-04-03T10:37:17 IST" duration-ms="16600" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{InvalidAccountNumber=1234, NotificationType=EMAIL, Reason=Test, Run=Yes, Status=Mask, Status2=Unmask, Template=Email 2, TestScenario=CoreAlertsMaskAcAndMaskingAutho}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Enter_Invalid_Account_Number -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:37:17 IST" name="takeScreenshotOnFailure" finished-at="2025-04-03T10:37:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Enter_Invalid_Account_Number status=SUCCESS method=AlertsMaskAcAndMaskingAutho_TestClass.Enter_Invalid_Account_Number(java.util.Map)[pri:9, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:37:17 IST" name="setupTest" finished-at="2025-04-03T10:37:17 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass.Leave_Account_Number_Empty() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Leave_Account_Number_Empty()[pri:10, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:37:17 IST" name="Leave_Account_Number_Empty" finished-at="2025-04-03T10:37:30 IST" duration-ms="13402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Leave_Account_Number_Empty -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:37:30 IST" name="takeScreenshotOnFailure" finished-at="2025-04-03T10:37:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Leave_Account_Number_Empty status=SUCCESS method=AlertsMaskAcAndMaskingAutho_TestClass.Leave_Account_Number_Empty()[pri:10, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="setupTest(java.lang.reflect.Method)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:37:31 IST" name="setupTest" finished-at="2025-04-03T10:37:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass.Confirm_Masking_Without_Reason(java.util.Map) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method signature="Confirm_Masking_Without_Reason(java.util.Map)[pri:11, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:37:31 IST" name="Confirm_Masking_Without_Reason" data-provider="TestData" finished-at="2025-04-03T10:39:11 IST" duration-ms="100736" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{InvalidAccountNumber=1234, NotificationType=EMAIL, Reason=Test, Run=Yes, Status=Mask, Status2=Unmask, Template=Email 2, TestScenario=CoreAlertsMaskAcAndMaskingAutho}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Confirm_Masking_Without_Reason -->
        <test-method is-config="true" signature="takeScreenshotOnFailure(org.testng.ITestResult)[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:39:11 IST" name="takeScreenshotOnFailure" finished-at="2025-04-03T10:39:11 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Confirm_Masking_Without_Reason status=SUCCESS method=AlertsMaskAcAndMaskingAutho_TestClass.Confirm_Masking_Without_Reason(java.util.Map)[pri:11, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- takeScreenshotOnFailure -->
        <test-method is-config="true" signature="afterEachTest()[pri:0, instance:core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass@2cd76f31]" started-at="2025-04-03T10:39:11 IST" name="afterEachTest" finished-at="2025-04-03T10:39:16 IST" duration-ms="4566" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTest -->
      </class> <!-- core.AlertsandNotifications.AlertsMaskAcAndMaskingAutho_TestClass -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
